// API callback
random_posts({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-4433261812355873863"},"updated":{"$t":"2015-09-16T10:54:08.518-07:00"},"category":[{"term":"CUDA Programming Concept"},{"term":"CUDA Basics"},{"term":"CUDA Advance"},{"term":"Optimization in CUDA"},{"term":"CUDA programs Level 1.1"},{"term":"Books on CUDA"},{"term":"Images Processing"},{"term":"CUDA programs Level 1.2"},{"term":"CUDA programs Level 2.1"},{"term":"Compilation"},{"term":"Matlab Coding"},{"term":"C program"},{"term":"Debugging"},{"term":"Installation"},{"term":"CUDA Function"},{"term":"Kepler Features"}],"title":{"type":"text","$t":"CUDA Programming"},"subtitle":{"type":"html","$t":"The Complexity of the Problem is the Simplicity of the Solution "},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/cuda-programming.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4433261812355873863\/posts\/default?alt=json-in-script\u0026start-index=35\u0026max-results=1"},{"rel":"alternate","type":"text/html","href":"http:\/\/cuda-programming.blogspot.com\/"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"previous","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4433261812355873863\/posts\/default?alt=json-in-script\u0026start-index=34\u0026max-results=1"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4433261812355873863\/posts\/default?alt=json-in-script\u0026start-index=36\u0026max-results=1"}],"author":[{"name":{"$t":"Nitin Gupta"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh5.googleusercontent.com\/-y8J34_QMdZA\/AAAAAAAAAAI\/AAAAAAAAACk\/yRljcINNhbw\/s512-c\/photo.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"70"},"openSearch$startIndex":{"$t":"35"},"openSearch$itemsPerPage":{"$t":"1"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-4433261812355873863.post-2413610387678195251"},"published":{"$t":"2013-01-16T07:58:00.003-08:00"},"updated":{"$t":"2013-03-11T05:43:07.442-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"CUDA Basics"},{"scheme":"http://www.blogger.com/atom/ns#","term":"CUDA Programming Concept"}],"title":{"type":"text","$t":"Shared Memory and Synchronization in CUDA Programming"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: Arial, sans-serif; font-size: 12pt;\"\u003EThis article lets u know what is shared memory and synchronization with detail and complete working example.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003ELet’s start our discussion. We start with this question;\u003C\/span\u003E\u003Cspan style=\"font-family: Arial, sans-serif; font-size: 12pt;\"\u003E\u0026nbsp;\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003EWhat is Shared Memory and Synchronization in CUDA Programming?\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cb\u003E\u003Cu\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 14.0pt; line-height: 115%;\"\u003EMotivation\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003EThe motivation for splitting blocks into threads was simply one of working around hardware limitations to the number of blocks we can have in flight. This is fairly weak motivation, because this could easily be done behind the scenes by the CUDA runtime. Fortunately, there are other reasons one might want to split a block into threads.\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cu\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 14.0pt;\"\u003EShared Memory in CUDA\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003ECUDA C makes available a region of memory that we call \u003Ci\u003Eshared memory\u003C\/i\u003E.\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003E This region of memory brings along with it another extension to the C language akin \u003Cb\u003Eto __device__ and __global__.\u003C\/b\u003E As a programmer, we can modify our variable declarations with the CUDA C keyword \u003Cb\u003E__shared__\u003C\/b\u003E to make this variable resident in shared memory. \u003Cb\u003EBut what’s the point?\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-VzeKCGTo_r4\/UPbN1ms29CI\/AAAAAAAAAss\/sV8xnDB1pwc\/s1600\/memory2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-VzeKCGTo_r4\/UPbN1ms29CI\/AAAAAAAAAss\/sV8xnDB1pwc\/s400\/memory2.png\" height=\"400\" width=\"335\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003EWe’re glad you asked\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003E. The CUDA C compiler treats variables in shared memory differently than typical variables\u003Cb\u003E\u003Cspan style=\"color: #0070c0;\"\u003E. \u003C\/span\u003E\u003Cspan style=\"color: #00b050;\"\u003EIt creates a copy of the variable for each block that you launch on the GPU. Every thread in that block shares the memory, but threads cannot see or modify the copy of this variable that is seen within other blocks. This provides an excellent means by which threads within a block can communicate and collaborate on computations. Furthermore, shared memory buffers reside physically on the GPU as opposed to residing in off-chip DRAM\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #00b050;\"\u003E.\u003Cb\u003E \u003C\/b\u003E\u003C\/span\u003EBecause of this, the latency to access shared memory tends to be far lower than typical buffers, making shared memory effective as a per-block, software managed cache or scratchpad.\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003EFig shows you the memory hierarchy diagram in CUDA Arch. With Shared Memory \u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-niP-6z5ON5M\/UPbNtnREQgI\/AAAAAAAAAsk\/jJIZE6ixUSw\/s1600\/memory.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-niP-6z5ON5M\/UPbNtnREQgI\/AAAAAAAAAsk\/jJIZE6ixUSw\/s640\/memory.png\" height=\"486\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cu\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 14.0pt;\"\u003EMotivation of Synchronization\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cu\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 14.0pt;\"\u003ERace Condition\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003EThe prospect of communication between threads should excite you. It excites me, too. But nothing in life is free, and interthread communication is no exception. \u003Cb\u003EIf we expect to communicate between threads, we also need a mechanism for synchronizing between threads\u003C\/b\u003E. For example, if thread A writes a value to shared memory and we want thread B to do something with this value, we can’t have thread B start its work until we know the write from thread A is complete\u003Cb\u003E. Without synchronization, we have created a race condition where the correctness of the execution results depends on the nondeterministic details of the hardware\u003C\/b\u003E. \u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cu\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 14.0pt;\"\u003EShared Memory and Global Memory\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cb\u003E\u003Cu\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 14.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003EShared memory\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003EThreads within the same block have two main ways to communicate data with each other. The fastest way would be to use shared memory. When a block of threads starts executing, it runs on an SM, a multiprocessor unit inside the GPU. \u003Cb\u003EEach SM has a fairly small amount of shared memory associated with it, usually 16KB of memory\u003C\/b\u003E. To make matters more difficult, often times, multiple thread blocks can run simultaneously on the same SM. \u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cb\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003EFor example,\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E if each SM has 16KB of shared memory and there are 4 thread blocks running simultaneously on an SM, then the maximum amount of shared memory available to each thread block would be 16KB\/4, or 4KB. So as you can see, if you only need the threads to share a small amount of data at any given time, using shared memory is by far the fastest and most convenient way to do it.\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cb\u003E\u003Cu\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 14.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003EGlobal memory\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003EHowever, if your program is using too much shared memory to store data, or your threads simply need to share too much data at once, then it is possible that the shared memory is not big enough to accommodate all the data that needs to be shared among the threads. In such a situation, threads always have the option of writing to and reading from global memory. Global memory is much slower than accessing shared memory; however, \u003Cb\u003Eglobal memory is much larger\u003C\/b\u003E. For most video cards sold today, there is at least 128MB of memory the GPU can access.\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cb\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003ELooking for the example? \u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cb\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003EDeclaring shared arrays\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003EFor CUDA kernels, there is a special keyword\u003Cb\u003E, __shared__,\u003C\/b\u003E which places a variable into shared memory for each respective thread block. The \u003Cb\u003E__shared__\u003C\/b\u003E keyword works on any type of variable or array. In the case for this tutorial, we will be declaring three arrays in shared memory.\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ctable border=\"1\" cellpadding=\"0\" cellspacing=\"0\" class=\"MsoTableLightList\" style=\"border-collapse: collapse; border: none; mso-border-alt: solid black 1.0pt; mso-border-themecolor: text1; mso-padding-alt: 0in 5.4pt 0in 5.4pt; mso-yfti-tbllook: 1184;\"\u003E \u003Ctbody\u003E\u003Ctr\u003E  \u003Ctd style=\"background: black; border: solid black 1.0pt; mso-background-themecolor: text1; mso-border-themecolor: text1; padding: 0in 5.4pt 0in 5.4pt; width: 6.65in;\" valign=\"top\" width=\"638\"\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Ci\u003E\u003Cspan style=\"color: #999999; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E\/\/ Declare arrays to   be in shared memory.\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/i\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Ci\u003E\u003Cspan style=\"color: #999999; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E\/\/ 256 elements * (4   bytes \/ element) * 3 = 3KB.\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/i\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E__shared__\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #ff6633; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E float\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E min\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #663300; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E[\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #999900; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E256\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #663300; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E];\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E__shared__\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #ff6633; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E float\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E max\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #663300; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E[\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #999900; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E256\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #663300; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E];\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E__shared__\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #ff6633; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E float\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E avg\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #663300; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E[\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #999900; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E256\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #663300; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E];\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: white; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; mso-themecolor: background1;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/td\u003E \u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin: 0in 0in 0pt;\"\u003E\u003Cspan style=\"font-family: 'Arial','sans-serif'; font-size: 12pt;\"\u003EIf you are not clear with idea of thread and block architecture and how to decide. please go through\u0026nbsp;\u003Ca href=\"http:\/\/cuda-programming.blogspot.in\/2013\/01\/thread-and-block-heuristics-in-cuda.html\" target=\"_blank\"\u003Ethis link\u003C\/a\u003E\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: 'Arial','sans-serif'; font-size: 12pt;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin: 0in 0in 0pt;\"\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003EFor descriptive example;\u0026nbsp;\u003Ca href=\"http:\/\/cuda-programming.blogspot.in\/2013\/01\/vector-dot-product-in-cuda-c.html\" target=\"_blank\"\u003E Vector Dot Product\u003C\/a\u003E\u0026nbsp; \u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt;\"\u003EFor Simple example with more description; \u003Ca href=\"http:\/\/cuda-programming.blogspot.in\/2013\/03\/using-shared-memory-in-cuda-cc.html\"\u003ESimple and explained\u003C\/a\u003E\u0026nbsp;\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3\u003E\u003Cu\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 14.0pt;\"\u003ESummary of the Article\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/h3\u003E\u003Cspan style=\"font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;;\"\u003EIn summing up this article, it is possible, and many times necessary, for threads within the same block to communicate with each other through either shared memory, or global memory. Shared memory is by far the fastest way, however due to it’s size limitations, some problems will be forced to use global memory for thread communication. Using \u003Cb\u003E__syncthreads\u003C\/b\u003E is sometimes necessary to ensure that all data from all threads is valid before threads read from shared memory which is written to by other threads. Below is a graph of execution time it took my CPU against the amount of time it took my graphics card. the CPU is a 2.66 Core 2 Duo, while the graphics card is a GTX 280, slightly \u003Cb\u003Eunderclocked.\u003C\/b\u003E As you can see, the GPU is faster when there are at least a million elements, and the spread between the GPU and CPU continues to widen with more elements. However, main system memory may be a significant bottleneck which is preventing the GPU from achieving more than 1.5x the processor performance.\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: Arial, sans-serif; font-size: 13.5pt;\"\u003EGot Questions?\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"font-family: 'Times New Roman', serif; font-size: 13.5pt;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: Arial, sans-serif; font-size: 13.5pt;\"\u003EFeel free to ask me any question because I'd be happy to walk you through step by step!\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"font-family: 'Times New Roman', serif; font-size: 13.5pt;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: Arial, sans-serif; font-size: 13.5pt;\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EReferences and External Links\u003C\/span\u003E\u003Cspan style=\"font-family: 'Times New Roman', serif; font-size: 13.5pt;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Ca href=\"http:\/\/en.wikipedia.org\/wiki\/Dot_product\"\u003E\u003Cspan style=\"color: blue; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003EWikipedia\u003C\/span\u003E\u003C\/a\u003E\u003Cspan style=\"font-family: Arial, sans-serif; font-size: 12pt;\"\u003E\u0026nbsp; \u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Ca href=\"http:\/\/hyperphysics.phy-astr.gsu.edu\/hbase\/vsca.html\"\u003E\u003Cspan style=\"color: blue; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003Ehyperphysic\u003C\/span\u003E\u003C\/a\u003E\u003Ca href=\"http:\/\/hyperphysics.phy-astr.gsu.edu\/hbase\/vsca.html\"\u003E\u003Cspan style=\"color: blue; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E\u0026nbsp;\u003C\/span\u003E\u003C\/a\u003E\u003Cu\u003E\u003Cspan style=\"color: blue; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/u\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Ca href=\"http:\/\/www.algebralab.org\/lessons\/lesson.aspx?file=Trigonometry_TrigVectorDotProd.xml\"\u003E\u003Cspan style=\"color: blue; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;;\"\u003Ealgebralab\u003C\/span\u003E\u003C\/a\u003E\u003Cspan style=\"font-family: 'Times New Roman', serif; font-size: 12pt;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Ca href=\"http:\/\/cuda-programming.blogspot.in\/2012\/12\/cuda-c-programming-guide.html\"\u003E\u003Cspan style=\"background: white; border: none windowtext 1.0pt; color: #f43a40; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-border-alt: none windowtext 0in; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; padding: 0in;\"\u003ECUDA C Programming Guide\u003C\/span\u003E\u003C\/a\u003E\u003Cspan style=\"font-family: 'Times New Roman', serif; font-size: 12pt;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Ca href=\"http:\/\/docs.nvidia.com\/cuda\/index.html\"\u003E\u003Cspan style=\"background: white; border: none windowtext 1.0pt; color: #d71a21; font-family: \u0026quot;Arial\u0026quot;,\u0026quot;sans-serif\u0026quot;; font-size: 12.0pt; mso-border-alt: none windowtext 0in; mso-fareast-font-family: \u0026quot;Times New Roman\u0026quot;; padding: 0in;\"\u003ECUDA; Nvidia\u003C\/span\u003E\u003C\/a\u003E\u003Cspan style=\"font-family: 'Times New Roman', serif; font-size: 12pt;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cspan style=\"font-family: Arial, sans-serif; font-size: 13.5pt;\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EFor Contact us….. Click on Contact us Tab\u003C\/span\u003E\u003Cspan style=\"font-family: 'Times New Roman', serif; font-size: 13.5pt;\"\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/cuda-programming.blogspot.com\/feeds\/2413610387678195251\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/cuda-programming.blogspot.com\/2013\/01\/shared-memory-and-synchronization-in.html#comment-form","title":"4 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4433261812355873863\/posts\/default\/2413610387678195251"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4433261812355873863\/posts\/default\/2413610387678195251"},{"rel":"alternate","type":"text/html","href":"http:\/\/cuda-programming.blogspot.com\/2013\/01\/shared-memory-and-synchronization-in.html","title":"Shared Memory and Synchronization in CUDA Programming"}],"author":[{"name":{"$t":"Nitin Gupta"},"uri":{"$t":"https:\/\/plus.google.com\/118135070601300565447"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"http:\/\/img2.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/4.bp.blogspot.com\/-VzeKCGTo_r4\/UPbN1ms29CI\/AAAAAAAAAss\/sV8xnDB1pwc\/s72-c\/memory2.png","height":"72","width":"72"},"thr$total":{"$t":"4"}}]}});